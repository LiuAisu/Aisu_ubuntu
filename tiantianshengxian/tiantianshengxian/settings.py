"""
Django settings for tiantianshengxian project.

Generated by 'django-admin startproject' using Django 2.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os, sys
"""这个配置是避免authenticate(username=user_name, password=pass_word)  
django 自带认证系统函数一直返回None的"""
AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.AllowAllUsersModelBackend']

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
sys.path.insert(0, os.path.join(BASE_DIR, 'static/dailyfresh'))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'sa&ta6=mhtua9ir)=i)!54j)t@wsfz21o&y+9m4#r%%i=6v57i'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
# ALLOWED_HOSTS = []
"""部署uwsgi 
如果django关闭了debug模式  django将不会为我们处理静态文件"""
DEBUG = False
ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack',  # 注册全文检索框架
    'cart',
    'goods',
    'order',
    'user',
    'tinymce',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tiantianshengxian.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tiantianshengxian.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dailyfresh',  # 配置数据库名
        'USER': 'aisu',  # 配置数据库 用户
        'PASSWORD': 'ss123456',  # 用户对应的密码
        # 主机地址 192.168.198.1    192.168.106.1
        # 'HOST': '192.168.0.105',  # 指定数据库ip地址
        'HOST': '192.168.0.104',
        'PORT': 3306,  # 数据库端口
        'OPTIONS': {'init_command': "SET sql_mode='STRICT_TRANS_TABLES'", 'charset': 'utf8', },
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'#使用中文
# 配置时区
# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'  # 没有北京时间 只有上海时间
# python manage.py createsuperuser

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
STATIC_URL = '/static/'
# 设置静态文件的保存目录  js css image等
# 加载过程类似模板   首先在配置的路径找 找不到的话 就去应用下的static文件夹找
# 动态的获取文件配置
# {% load staticfiles %}  先加载路径
# 再动态获取 <image src="{% static '文件的路径' %}"
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# 配置上传文件的保存目录
# 上传文件时 将以media为基文件夹
MEDIA_ROOT = os.path.join('static/media')

# 下面是最新的配置
"""redis主从配置时 需要给redis增加密码 
要一分从配置文件  并且主从绑定的端口不能相同
增加配置slaveof 192.168.233.130 6379
同时需要 配置 masterauth password
配置主从有助于增加网站效率  通过主redis来写数据   从redis来读数据
"""
"""SESSION_ENGINE = 'redis_sessions.session'
SESSION_REDIS = {
    'host': '192.168.233.130',
    'port': 6379,
    'db': 2,
    'password': 'ss123456',
    'prefix': 'session',
    'socket_timeout': 1
}"""
# 使用redis存储session的另一种方式 使用 django-redis包
# 并且可以作为缓存使用
# django里的memcached也是一个内存型数据库 也可作缓存
# 缓存方式
# 1.站点级缓存 把网站数据都进行缓存  但使用内存大不可取
# 2. 单个view缓存  cache_page装饰器  会将视图返回的内容进行缓存 还可以设置缓存时间 以秒计数
# 3. 模板级缓存 可以缓存模板内的一部分内容  使用标签  {% load cache %}
# 我们使用django.core.cache模块 底层操作API直接自己 设置和读取缓存
# 基本用法 set(key, value, timeout)  key即缓存名字  value即数据  timeout过期时间
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/9",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": "ss123456"
        }
    }
}
# 设置session存储
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"


# 指定django 认证系统使用的模型类
AUTH_USER_MODEL = 'user.User'  # 其中user为app名称，User为模型类名称
# 使用富文本编辑器需要增加配置 指定其功能
TINYMCE_DEFAULT_CONFIG = {
    'theme': 'silver',
    'width': 600,
    'height': 400,
}



"""# qq IMAP/SMTP 配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.qq.com'
EMAIL_PORT = 25  # 或者 465/587是设置了 SSL 加密方式
# 发送邮件的邮箱
EMAIL_HOST_USER = '你的邮箱'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = '你的IMAP授权码' # 如果重新设置了新的授权码,直接使用最新的授权码即可
EMAIL_USE_TLS = True  # 这里必须是 True，否则发送不成功
# 收件人看到的发件人, 必须是一直且有效的
EMAIL_FROM = 'Tencent<你的邮箱>'"""
# qq POP3/SMTP 配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.qq.com'
EMAIL_PORT = 25  # 或者 995是设置了 SSL 加密方式
# 发送邮件的邮箱
EMAIL_HOST_USER = '1720129768@qq.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'kvxyrfwogiyxbfaa'  # 如果重新设置了新的授权码,直接使用最新的授权码即可
EMAIL_USE_TLS = True  # 这里必须是 True，否则发送不成功
# 收件人看到的发件人
EMAIL_FROM = 'Aisu<1720129768@qq.com>'
LOGIN_URL = '/user/login/'

# 设置django文件存储类
DEFAULT_FILE_STORAGE = 'utils.fdfs.storage.FDFSStorage'

# 自己配置client.conf文件路径
FAFS_CLIENT_CONF = './utils/fdfs/client.conf'
# 自己设置fdfs存储服务器上nginx的ip和端口
FAFS_BASE_URL = 'http://127.0.0.1:8888/'

"""全文检索框架的配置
要在对应的应用下新建 search_indexes.py  名字固定
在这个里面定义索引类"""
HAYSTACK_CONNECTIONS = {
    'default': {
        # 使用whoosh引擎 haystack/backends/whoosh_backend/WhooshEngine 写对应的搜索引擎路径
        # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        # 使用自己的文件配置
        'ENGINE': 'haystack.backends.whoosh_cp_backend.WhooshEngine',
        # 设置生成索引文件的路径，创建whoosh_index目录，生成文件会自动创建
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}
# 对应字段当添加、修改、删除数据时，重新自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

"""配置支付宝沙箱环境支付"""
ALIPAY_APPID = '2021000118626099'

# 配置静态文件收集目录
STATIC_ROOT = '/home/aisu/Django_项目/dailyfresh/static'
